// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoretoBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("storeToSize")
  colors     Color[]     @relation("storeToColor")
  product    Product[]   @relation("storeToProduct")
}

model Billboard {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String
  storeId    String
  store      Store      @relation("StoretoBillboard", fields: [storeId], references: [id])
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt
  Categories Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  product     Product[] @relation("categoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id       String    @id @default(uuid())
  name     String
  value    String
  storeId  String
  store    Store     @relation("storeToSize", fields: [storeId], references: [id])
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  product  Product[]

  @@index([storeId])
}

model Color {
  id       String    @id @default(uuid())
  name     String
  value    String
  storeId  String
  store    Store     @relation("storeToColor", fields: [storeId], references: [id])
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  product  Product[]

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())

  name       String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId     String
  size       Size    @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color   @relation(fields: [colorId], references: [id])
  storeId    String
  store      Store    @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("categoryToProduct", fields: [categoryId], references: [id])
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  images     Image[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([productId])
}

